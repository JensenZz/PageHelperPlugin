package com.gexin.platform.mybatis.generator.plugins;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.mybatis.generator.api.FullyQualifiedTable;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.XmlElement;

/**
 * <p>Title: 类的名称</p>
 * <p>Description: 类的实现描述<p>
 * <p>Copyright: Copyright (c) 2018</p>
 * <p>Company:个推 </p>
 *
 * @author JensenZz
 * @version 1.0
 * @date 2018/7/17
 */

public class PageHelperPlugin extends PluginAdapter {

    private FullyQualifiedJavaType page = new FullyQualifiedJavaType("com.github.pagehelper.Page");

    private Map<FullyQualifiedTable, List<XmlElement>> elementsToAdd = new HashMap<>();

    @Override
    public boolean validate(List<String> list) {
        return true;
    }


    @Override
    public boolean clientSelectByExampleWithBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
            copyAndAddMethod(method, interfaze, method.getReturnType());
        } else if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3_DSQL) {
            copyAndAddSelectByExampleMethodForDSQL(method, interfaze, method.getReturnType());
        }
        return true;
    }

    @Override
    public boolean clientSelectByExampleWithoutBLOBsMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
            copyAndAddMethod(method, interfaze, method.getReturnType());
        }
        return true;
    }

    @Override
    public boolean sqlMapSelectByExampleWithoutBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {
        if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
            copyAndSaveElement(element, introspectedTable.getFullyQualifiedTable());
        }
        return true;
    }

    @Override
    public boolean sqlMapSelectByExampleWithBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {
        if (introspectedTable.getTargetRuntime() == IntrospectedTable.TargetRuntime.MYBATIS3) {
            copyAndSaveElement(element, introspectedTable.getFullyQualifiedTable());
        }
        return true;
    }

    /**
     * We'll override this method and add any new elements generated by
     * previous calls
     */
    @Override
    public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
        List<XmlElement> elements = elementsToAdd.get(introspectedTable.getFullyQualifiedTable());
        if (elements != null) {
            for (XmlElement element : elements) {
                document.getRootElement().addElement(element);
            }
        }

        return true;
    }

    @Override
    public boolean clientBasicSelectManyMethodGenerated(Method method, Interface interfaze, IntrospectedTable introspectedTable) {
        copyAndAddSelectManyMethod(method, interfaze, method.getReturnType());

        addNewComposedFunction(interfaze, introspectedTable, method.getReturnType());
        return true;
    }

    private void addNewComposedFunction(Interface interfaze, IntrospectedTable introspectedTable, FullyQualifiedJavaType baseMethodReturnType) {
        interfaze.addImportedType(new FullyQualifiedJavaType("java.util.function.Function"));

        FullyQualifiedJavaType returnType = new FullyQualifiedJavaType("Function<SelectStatementProvider, " + baseMethodReturnType.getShortName().replace("List","Page") + ">");

        Method method = new Method("selectManyWithPage");
        method.setDefault(true);
        method.setReturnType(returnType);
        method.addBodyLine("return selectStatement -> selectManyWithPage(selectStatement);");
        context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, interfaze.getImportedTypes());
        interfaze.addMethod(method);
    }

    /**
     * Use the method copy constructor to create a new method, then
     * add the rowBounds parameter.
     *
     * @param method              the method
     */
    private void copyAndAddMethod(Method method, Interface interfaze, FullyQualifiedJavaType baseMethodReturnType) {
        Method newMethod = new Method(method);
        newMethod.setName(method.getName() + "WithPage");
        FullyQualifiedJavaType returnType = new FullyQualifiedJavaType(baseMethodReturnType.getShortName().replace("List","Page"));
        newMethod.setReturnType(returnType);
        interfaze.addMethod(newMethod);
        interfaze.addImportedType(page);
    }

    private void copyAndAddSelectManyMethod(Method method, Interface interfaze, FullyQualifiedJavaType baseMethodReturnType) {
        List<String> annotations = new ArrayList<>(method.getAnnotations());

        // remove the @Results annotation and replace it with @ResultMap
        boolean inResultsAnnotation = false;
        String resultMapId = null;
        Iterator<String> iter = annotations.iterator();
        while (iter.hasNext()) {
            String annotation = iter.next();

            if (inResultsAnnotation) {
                if (annotation.equals("})")) {
                    inResultsAnnotation = false;
                }
                iter.remove();
            } else if (annotation.startsWith("@Results(")) {
                inResultsAnnotation = true;
                iter.remove();

                // now find the ID
                int index = annotation.indexOf("id=\"");
                int startIndex = index + "id=\"".length();
                int endIndex = annotation.indexOf('\"', startIndex + 1);
                resultMapId = annotation.substring(startIndex, endIndex);
            }
        }

        if (resultMapId != null) {
            interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.ResultMap"));
            annotations.add("@ResultMap(\"" + resultMapId + "\")");
        }

        Method newMethod = new Method(method);
        newMethod.getAnnotations().clear();
        for (String annotation : annotations) {
            newMethod.addAnnotation(annotation);
        }
        FullyQualifiedJavaType returnType = new FullyQualifiedJavaType(baseMethodReturnType.getShortName().replace("List","Page"));

        newMethod.setName(method.getName() + "WithPage");
        newMethod.setReturnType(returnType);
        interfaze.addMethod(newMethod);
        interfaze.addImportedType(page);
    }

    private void copyAndAddSelectByExampleMethodForDSQL(Method method, Interface interfaze, FullyQualifiedJavaType baseMethodReturnType) {
        Method newMethod = new Method(method);
        FullyQualifiedJavaType returnType = new FullyQualifiedJavaType(baseMethodReturnType.getShortName().replace("List","Page"));
        newMethod.setReturnType(returnType);
        interfaze.addMethod(newMethod);
        interfaze.addImportedType(page);

        // replace the call to selectMany with the new call to selectManyWithPage
        for (int i = 0; i < newMethod.getBodyLines().size(); i++) {
            String bodyLine = newMethod.getBodyLines().get(i);

            if (bodyLine.contains("this::selectMany")) {
                bodyLine = bodyLine.replace("this::selectMany", "selectManyWithPage");
                newMethod.getBodyLines().set(i, bodyLine);
                break;
            }
        }
    }

    /**
     * Use the method copy constructor to create a new element
     */
    private void copyAndSaveElement(XmlElement element, FullyQualifiedTable fqt) {
        XmlElement newElement = new XmlElement(element);

        // remove old id attribute and add a new one with the new name
        for (Iterator<Attribute> iterator = newElement.getAttributes().iterator(); iterator.hasNext(); ) {
            Attribute attribute = iterator.next();
            if ("id".equals(attribute.getName())) {
                iterator.remove();
                Attribute newAttribute = new Attribute("id", attribute.getValue() + "WithPage");
                newElement.addAttribute(newAttribute);
                break;
            }
        }

        // save the new element locally.   We'll add it to the document
        // later
        List<XmlElement> elements = elementsToAdd.get(fqt);
        if (elements == null) {
            elements = new ArrayList<>();
            elementsToAdd.put(fqt, elements);
        }
        elements.add(newElement);
    }
}
